```Pour utiliser la fonction map sur ces données JSON, vous devez d'abord les convertir en objet JavaScript. Ensuite, vous pouvez utiliser la fonction map pour itérer à travers les éléments de la liste "commandes" et appliquer une fonction à chaque élément.```

```Voici un exemple de code JavaScript qui utilise la fonction map sur les données JSON fournies :```

```javascript
const jsonData = {
  "utilisateur": {
    "nom": "Jean",
    "âge": 30,
    "actif": true
  },
  "commandes": [
    {
      "produit": "Livre",
      "quantité": 2
    },
    {
      "produit": "Stylo",
      "quantité": 5
    }
  ]
};

// Convertir les données JSON en objet JavaScript
const data = JSON.parse(JSON.stringify(jsonData));

// Utiliser la fonction map pour itérer à travers les éléments de la liste "commandes"
const nouvellesCommandes = data.commandes.map(commande => {
  return {
    produit: commande.produit.toUpperCase(),
    quantité: commande.quantité * 2
  };
});

console.log(nouvellesCommandes);


// Ajouter une nouvelle commande à la liste existante
const nouvelleCommande = {
  produit: "Cahier",
  quantité: 3
};

data.commandes.push(nouvelleCommande);

console.log(data);



Pour ajouter une nouvelle commande à ces données avec du code JavaScript dans un formulaire, vous pouvez d'abord capturer les informations de la nouvelle commande à partir des champs du formulaire. Ensuite, vous pouvez créer un nouvel objet de commande avec ces informations et l'ajouter à la liste existante. Voici un exemple de code JavaScript pour le faire dans un formulaire :

```
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ajouter une commande</title>
</head>
<body>
  <form id="commandeForm">
    <label for="produit">Produit:</label>
    <input type="text" id="produit" name="produit"><br><br>
    <label for="quantite">Quantité:</label>
    <input type="number" id="quantite" name="quantite"><br><br>
    <input type="submit" value="Ajouter la commande">
  </form>

  <script>
    document.getElementById('commandeForm').addEventListener('submit', function(event) {
      event.preventDefault();

      const produit = document.getElementById('produit').value;
      const quantite = parseInt(document.getElementById('quantite').value);

      const nouvelleCommande = {
        produit: produit,
        quantité: quantite
      };

      // Ajouter la nouvelle commande à la liste existante
      const jsonData = {
        "utilisateur": {
          "nom": "Jean",
          "âge": 30,
          "actif": true
        },
        "commandes": [
          {
            "produit": "Livre",
            "quantité": 2
          },
          {
            "produit": "Stylo",
            "quantité": 5
          }
        ]
      };

      // Convertir les données JSON en objet JavaScript
      const data = JSON.parse(JSON.stringify(jsonData));
      data.commandes.push(nouvelleCommande);

      console.log(data);
    });
  </script>
</body>
</html>
```

Dans cet exemple, nous avons créé un formulaire avec des champs pour le produit et la quantité, ainsi qu'un bouton pour ajouter la commande. Lorsque le formulaire est soumis, les informations de la nouvelle commande sont capturées, un nouvel objet de commande est créé, puis ajouté à la liste existante. Les données mises à jour sont ensuite affichées dans la console.



















```

```Dans cet exemple, la fonction map est utilisée pour créer une nouvelle liste de commandes en convertissant le nom du produit en majuscules et en doublant la quantité de chaque produit.